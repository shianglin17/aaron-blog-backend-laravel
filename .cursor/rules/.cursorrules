# Aaron Blog Backend Laravel 專案規範

## 專案概述

本專案是 Aaron Blog 的後端 API 服務，使用 Laravel 12 框架開發。本文件定義了專案的開發規範和架構準則，以確保程式碼品質和專案的可維護性。

## 技術棧

- PHP 8.2+
- Laravel 12
- MySQL/PostgreSQL
- Redis（快取和隊列）
- RESTful API
- PHPUnit（測試）
- Swagger/OpenAPI（API 文件）

## 目錄結構

```
app/
├── Console/          # 命令列指令
├── Http/
│   ├── Controllers/ # 控制器
│   ├── Middleware/  # 中間件
│   ├── Requests/    # 表單請求驗證
│   └── Resources/   # API 資源轉換
├── Models/          # Eloquent 模型
├── Services/        # 業務邏輯服務
├── Repositories/    # 資料存取層
└── Exceptions/      # 異常處理
```

## 程式碼規範

### 1. 命名規範

#### 1.1 類別命名
- 使用大駝峰式命名法（PascalCase）
- 名稱應該清楚表達類別的用途
- 控制器類別以 `Controller` 結尾
- 模型類別使用單數形式

```php
class ArticleController extends Controller
class UserService
class Article extends Model
```

#### 1.2 方法命名
- 使用小駝峰式命名法（camelCase）
- 動詞開頭，清楚表達方法的行為
- 布林值判斷方法使用 `is`、`has`、`can` 等前綴

```php
public function createArticle()
public function getUserById()
public function isPublished()
```

#### 1.3 變數命名
- 使用小駝峰式命名法
- 名稱應該清楚表達其用途
- 避免使用縮寫（除非是普遍接受的縮寫）

```php
$articleCount
$userEmail
$isActive
```

### 2. 程式碼風格

#### 2.1 縮排和格式
- 使用 4 個空格作為縮排
- 大括號獨立一行
- 運算子前後加空格
- 逗號後加空格

#### 2.2 註解規範
- 使用 PHPDoc 為類別和方法添加文件
- 複雜的邏輯需要添加註解說明
- 使用中文註解以提高可讀性

```php
/**
 * 創建新文章
 *
 * @param  CreateArticleRequest  $request
 * @return ArticleResource
 * @throws ValidationException
 */
public function store(CreateArticleRequest $request)
{
    // 處理文章創建邏輯
}
```

### 3. 架構規範

#### 3.1 控制器
- 遵循單一職責原則
- 使用表單請求進行驗證
- 使用資源類進行響應轉換
- 保持控制器簡潔，業務邏輯放在服務層

#### 3.2 服務層
- 封裝複雜的業務邏輯
- 使用依賴注入
- 避免在服務中直接使用 Request 或 Response

#### 3.3 資料庫存取
- 使用資料庫遷移管理資料庫結構
- 使用 Eloquent 關聯處理模型關係
- 使用查詢構建器優化查詢
- 適當使用資料庫索引

### 4. API 開發規範

#### 4.1 RESTful API 設計
- 使用適當的 HTTP 方法
- 使用複數名詞作為資源標識
- 使用巢狀路由表示資源關係
- 版本控制使用 URL 前綴

```php
// API 路由示例
Route::prefix('api/v1')->group(function () {
    Route::apiResource('articles', ArticleController::class);
    Route::apiResource('articles.comments', CommentController::class);
});
```

#### 4.2 響應格式
- 使用統一的響應格式
- 使用適當的 HTTP 狀態碼
- 錯誤響應包含清晰的錯誤訊息

```json
{
    "status": "success",
    "data": {
        "id": 1,
        "title": "文章標題"
    },
    "message": "文章創建成功"
}
```

### 5. 安全規範

- 使用 Laravel Sanctum 進行 API 認證
- 實作適當的授權政策
- 驗證所有用戶輸入
- 使用 HTTPS
- 實作適當的 CORS 政策

### 6. 測試規範

- 為所有功能編寫測試
- 使用 Factories 創建測試數據
- 模擬外部服務
- 保持測試簡單且專注

```php
public function test_can_create_article()
{
    $response = $this->postJson('/api/v1/articles', [
        'title' => '測試文章',
        'content' => '文章內容'
    ]);

    $response->assertStatus(201);
}
```

### 7. 版本控制

#### 7.2 提交訊息
- 使用中文撰寫提交訊息
- 清楚說明改動內容
- 使用適當的前綴標記提交類型

```
feat: 新增文章評論功能
fix: 修復文章無法刪除的問題
docs: 更新 API 文件
```

## 持續整合/持續部署 (CI/CD)

- 使用 GitHub Actions 進行自動化測試
- 自動執行程式碼風格檢查
- 自動執行單元測試和功能測試
- 自動部署到測試環境

## 文件維護

- 及時更新 API 文件
- 維護部署和配置文件
- 記錄重要的架構決策
- 更新此規範文件

## 結論
這是一個以學習為主，並且透過實戰來學習的專案

遵循這些規範可以幫助我們：
- 提高程式碼品質
- 增加可維護性
- 減少 bug
- 提高開發效率
- 便於團隊協作

請所有開發者嚴格遵循這些規範，有任何建議或問題請提出討論。

## 補充規則

- model 的資料已文件有出現的為參考，不要多一些奇怪的欄位
- 開發請使用最新的寫法